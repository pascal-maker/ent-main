// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/lolopinto/ent/internal/test_schema/graphql/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

type AddressCreateInput struct {
	City          string   `json:"city"`
	Country       string   `json:"country"`
	ResidentNames []string `json:"residentNames"`
	State         string   `json:"state"`
	StreetAddress string   `json:"streetAddress"`
	Zip           string   `json:"zip"`
}

type AddressCreateResponse struct {
	Address *models.Address `json:"address"`
}

type AddressDeleteInput struct {
	AddressID string `json:"addressID"`
}

type AddressDeleteResponse struct {
	DeletedAddressID *string `json:"deletedAddressId"`
}

type AddressEditInput struct {
	AddressID     string   `json:"addressID"`
	City          string   `json:"city"`
	Country       string   `json:"country"`
	ResidentNames []string `json:"residentNames"`
	State         string   `json:"state"`
	StreetAddress string   `json:"streetAddress"`
	Zip           string   `json:"zip"`
}

type AddressEditResponse struct {
	Address *models.Address `json:"address"`
}

type AdminBlockInput struct {
	BlockeeID string `json:"blockeeID"`
	BlockerID string `json:"blockerID"`
}

type AdminBlockResponse struct {
	Success *bool `json:"success"`
}

type AuthCheckAvailableEmailAddressInput struct {
	EmailAddress string `json:"emailAddress"`
}

type AuthCheckAvailableEmailAddressResponse struct {
	Available bool `json:"available"`
}

type AuthCheckAvailablePhoneNumberInput struct {
	PhoneNumber string `json:"phoneNumber"`
}

type AuthCheckAvailablePhoneNumberResponse struct {
	Available bool `json:"available"`
}

type AuthEmailPasswordInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AuthEmailPasswordResponse struct {
	Token string `json:"token"`
}

type AuthEmailTokenInput struct {
	Token string `json:"token"`
}

type AuthEmailTokenResponse struct {
	Token string `json:"token"`
}

type AuthPhoneNumberInput struct {
	PhoneNumber string `json:"phoneNumber"`
	Pin         string `json:"pin"`
}

type AuthPhoneNumberResponse struct {
	Token string `json:"token"`
}

type AuthPhoneTokenInput struct {
	Token string `json:"token"`
}

type AuthPhoneTokenResponse struct {
	Token string `json:"token"`
}

type AuthSendSMSInput struct {
	PhoneNumber string `json:"phoneNumber"`
}

type AuthSendSMSResponse struct {
	Pin string `json:"pin"`
}

type AuthSignoutEmailResponse struct {
	Success *bool `json:"success"`
}

type AuthSignoutResponse struct {
	Success *bool `json:"success"`
}

type AuthUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AuthUserResponse struct {
	Token string       `json:"token"`
	User  *models.User `json:"user"`
}

type AuthUserResult struct {
	Token string       `json:"token"`
	User  *models.User `json:"user"`
}

type AuthValidCredentialsInput struct {
	PhoneNumber string `json:"phoneNumber"`
	Pin         string `json:"pin"`
}

type AuthValidCredentialsResponse struct {
	Available bool `json:"available"`
}

type ContactCreateInput struct {
	EmailAddress  string   `json:"emailAddress"`
	Favorite      *bool    `json:"favorite"`
	FirstName     string   `json:"firstName"`
	LastName      string   `json:"lastName"`
	NumberOfCalls *int     `json:"numberOfCalls"`
	Pi            *float64 `json:"pi"`
	UserID        string   `json:"userID"`
}

type ContactCreateResponse struct {
	Contact *models.Contact `json:"contact"`
}

type EventCreateInput struct {
	EndTime   *time.Time `json:"endTime"`
	Location  string     `json:"location"`
	Name      string     `json:"name"`
	StartTime time.Time  `json:"startTime"`
	UserID    string     `json:"userID"`
}

type EventCreateResponse struct {
	Event *models.Event `json:"event"`
}

type EventRsvpStatusEditInput struct {
	EventID    string `json:"eventID"`
	RsvpStatus string `json:"rsvpStatus"`
	UserID     string `json:"userID"`
}

type EventRsvpStatusEditResponse struct {
	Event *models.Event `json:"event"`
}

type EventsConnection struct {
	Edges []*EventsEdge   `json:"edges"`
	Nodes []*models.Event `json:"nodes"`
}

func (EventsConnection) IsConnection() {}

type EventsEdge struct {
	Node *models.Event `json:"node"`
}

func (EventsEdge) IsEdge() {}

type LogEvent2Input struct {
	Event string `json:"event"`
}

type LogEvent2Response struct {
	Success *bool `json:"success"`
}

type LogEventInput struct {
	Event string `json:"event"`
}

type LogEventResponse struct {
	Success *bool `json:"success"`
}

type UserAddFamilyMemberInput struct {
	FamilyMemberID string `json:"familyMemberID"`
	UserID         string `json:"userID"`
}

type UserAddFamilyMemberResponse struct {
	User *models.User `json:"user"`
}

type UserAddFriendInput struct {
	FriendID string `json:"friendID"`
	UserID   string `json:"userID"`
}

type UserAddFriendResponse struct {
	User *models.User `json:"user"`
}

type UserCreateInput struct {
	Bio          *string `json:"bio"`
	EmailAddress string  `json:"emailAddress"`
	FirstName    string  `json:"firstName"`
	LastName     string  `json:"lastName"`
	Password     string  `json:"password"`
	PhoneNumber  *string `json:"phoneNumber"`
}

type UserCreateResponse struct {
	User *models.User `json:"user"`
}

type UserDeleteInput struct {
	UserID string `json:"userID"`
}

type UserDeleteResponse struct {
	DeletedUserID *string `json:"deletedUserId"`
}

type UserEditInput struct {
	Bio       *string `json:"bio"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	UserID    string  `json:"userID"`
}

type UserEditResponse struct {
	User *models.User `json:"user"`
}

type UserRemoveFamilyMemberInput struct {
	FamilyMemberID string `json:"familyMemberID"`
	UserID         string `json:"userID"`
}

type UserRemoveFamilyMemberResponse struct {
	User *models.User `json:"user"`
}

type UserRemoveFriendInput struct {
	FriendID string `json:"friendID"`
	UserID   string `json:"userID"`
}

type UserRemoveFriendResponse struct {
	User *models.User `json:"user"`
}

type UsersConnection struct {
	Edges []*UsersEdge   `json:"edges"`
	Nodes []*models.User `json:"nodes"`
}

func (UsersConnection) IsConnection() {}

type UsersEdge struct {
	Node *models.User `json:"node"`
}

func (UsersEdge) IsEdge() {}

type ViewerBlockInput struct {
	BlockeeID string `json:"blockeeID"`
}

type ViewerBlockMultipleIDsInput struct {
	UserIDs []string `json:"userIDs"`
}

type ViewerBlockMultipleIDsResponse struct {
	Viewer *viewer.Viewer `json:"viewer"`
}

type ViewerBlockMultipleInput struct {
	UserIDs []string `json:"userIDs"`
}

type ViewerBlockMultipleResponse struct {
	Viewer *viewer.Viewer `json:"viewer"`
}

type ViewerBlockParamResponse struct {
	Viewer *viewer.Viewer `json:"viewer"`
}

type ViewerBlockResponse struct {
	Viewer *viewer.Viewer `json:"viewer"`
}

type EventRsvpStatus string

const (
	EventRsvpStatusEventAttending EventRsvpStatus = "EVENT_ATTENDING"
	EventRsvpStatusEventDeclined  EventRsvpStatus = "EVENT_DECLINED"
	EventRsvpStatusEventInvited   EventRsvpStatus = "EVENT_INVITED"
	EventRsvpStatusEventUnknown   EventRsvpStatus = "EVENT_UNKNOWN"
)

var AllEventRsvpStatus = []EventRsvpStatus{
	EventRsvpStatusEventAttending,
	EventRsvpStatusEventDeclined,
	EventRsvpStatusEventInvited,
	EventRsvpStatusEventUnknown,
}

func (e EventRsvpStatus) IsValid() bool {
	switch e {
	case EventRsvpStatusEventAttending, EventRsvpStatusEventDeclined, EventRsvpStatusEventInvited, EventRsvpStatusEventUnknown:
		return true
	}
	return false
}

func (e EventRsvpStatus) String() string {
	return string(e)
}

func (e *EventRsvpStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventRsvpStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventRsvpStatus", str)
	}
	return nil
}

func (e EventRsvpStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
